{"symbol":{"symbol":{"name":"defs","isTerminal":false}},"elems":[{"symbol":{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},"elems":[{"symbol":{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"},"elems":[{"symbol":{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"types","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},{"symbol":{"name":"let","isTerminal":true},"tooltip":"The scope of a let variable is block scope"},{"symbol":{"name":"const","isTerminal":true},"tooltip":"The scope of a const variable is block scope"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Select type of identifier"},"userInput_":"array","type":"InputBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"array name"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":5,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"="},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"ARRAY_CONST","isTerminal":false}},"elems":[{"symbol":{"symbol":{"name":"LSB","isTerminal":true},"alias":"["},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"element_list","isTerminal":false}},"elems":[{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"element"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"type":"SelectionBlock"}],"repetitiveElem":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"element"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"type":"SelectionBlock"},"type":"RepetitionGroup"},{"symbol":{"symbol":{"name":"RSB","isTerminal":true},"alias":"]"},"type":"SimpleBlock"}],"type":"Group"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":5,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":5,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"def","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"stmt","isTerminal":false}},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock"}}}}},{"type":"NewLine"},{"symbol":{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},"elems":[{"symbol":{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"},"elems":[{"symbol":{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"types","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},{"symbol":{"name":"let","isTerminal":true},"tooltip":"The scope of a let variable is block scope"},{"symbol":{"name":"const","isTerminal":true},"tooltip":"The scope of a const variable is block scope"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Select type of identifier"},"userInput_":"n","type":"InputBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"Left operand to be assigned"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock"}}},{"symbol":{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"assign_op","isTerminal":false},"tooltip":"Assign operator, simple or with an operation "},"alternateSymbols":[{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},{"symbol":{"name":"PLUS_ASSIGN","isTerminal":true},"alias":"+=","tooltip":"Sums up left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"SUB_ASSIGN","isTerminal":true},"alias":"-=","tooltip":"Subtract right operand value from the left operand value and assigns the result to the left operand"},{"symbol":{"name":"MULT_ASSIGN","isTerminal":true},"alias":"*=","tooltip":"Multiply left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"DIV_ASSIGN","isTerminal":true},"alias":"/=","tooltip":"Divide left operand value by right operand value and assign the result to the left operand"},{"symbol":{"name":"MOD_ASSIGN","isTerminal":true},"alias":"%=","tooltip":"Get the modulus of left operand divide by right operand and assign resulted modulus to the left operand"},{"symbol":{"name":"EXP_ASSIGN","isTerminal":true},"alias":"**=","tooltip":"Raises the value of left operand to the power of the right operand and assign the result to the left operand"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},"elems":[{"symbol":{"symbol":{"name":"prompt","isTerminal":true}},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"LP","isTerminal":true},"alias":"("},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"STRING_CONST","isTerminal":true},"alias":"prompt_message"},"userInput_":"Give the length of your array","type":"InputBlock"},{"symbol":{"symbol":{"name":"RP","isTerminal":true},"alias":")"},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},"alternateSymbols":[{"symbol":{"name":"math_call","isTerminal":false},"tooltip":"Use a built-in math function"},{"symbol":{"name":"string_method_call","isTerminal":false},"tooltip":"Use a built-in string method"},{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},{"symbol":{"name":"object_method_call","isTerminal":false},"tooltip":"Use a built-in object method"},{"symbol":{"name":"function_call","isTerminal":false},"tooltip":"Use a user-defined function as \"name(params);\""},{"symbol":{"name":"print_call","isTerminal":false},"tooltip":"Use a built-in function to print the value of the given expression (text, number etc.)"},{"symbol":{"name":"output_color","isTerminal":false},"tooltip":"Change the color of the text in the output console"},{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},{"symbol":{"name":"key_event","isTerminal":false},"tooltip":"Add and remove event listener for a key of your choice"},{"symbol":{"name":"type_of","isTerminal":false},"tooltip":"Typeof operator returns the data type of a variable e.g function,string,number,boolean,object"}],"selectedSymbol":7,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"Right operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":4,"type":"SelectionBlock"}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":3,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":5,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"def","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"stmt","isTerminal":false}},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock"}}}},{"type":"NewLine"},{"symbol":{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Print all the elements of an array."},"elems":[{"symbol":{"symbol":{"name":"for","isTerminal":true}},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"LP","isTerminal":true},"alias":"("},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},"elems":[{"symbol":{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"},"elems":[{"symbol":{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"types","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},{"symbol":{"name":"let","isTerminal":true},"tooltip":"The scope of a let variable is block scope"},{"symbol":{"name":"const","isTerminal":true},"tooltip":"The scope of a const variable is block scope"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Select type of identifier"},"userInput_":"i","type":"InputBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"Left operand to be assigned"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock"}}},{"symbol":{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"assign_op","isTerminal":false},"tooltip":"Assign operator, simple or with an operation "},"alternateSymbols":[{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},{"symbol":{"name":"PLUS_ASSIGN","isTerminal":true},"alias":"+=","tooltip":"Sums up left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"SUB_ASSIGN","isTerminal":true},"alias":"-=","tooltip":"Subtract right operand value from the left operand value and assigns the result to the left operand"},{"symbol":{"name":"MULT_ASSIGN","isTerminal":true},"alias":"*=","tooltip":"Multiply left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"DIV_ASSIGN","isTerminal":true},"alias":"/=","tooltip":"Divide left operand value by right operand value and assign the result to the left operand"},{"symbol":{"name":"MOD_ASSIGN","isTerminal":true},"alias":"%=","tooltip":"Get the modulus of left operand divide by right operand and assign resulted modulus to the left operand"},{"symbol":{"name":"EXP_ASSIGN","isTerminal":true},"alias":"**=","tooltip":"Raises the value of left operand to the power of the right operand and assign the result to the left operand"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"INT_CONST","isTerminal":true},"tooltip":"An integer is a positive, zero, or negative number that can be written without a fractional component (i.e. no decimal point places)"},"userInput_":"0","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},"alternateSymbols":[{"symbol":{"name":"INT_CONST","isTerminal":true},"tooltip":"An integer is a positive, zero, or negative number that can be written without a fractional component (i.e. no decimal point places)"},{"symbol":{"name":"FLOAT_CONST","isTerminal":true},"tooltip":"A floating-point number is a rational number (i.e. includes numbers with decimal point places"},{"symbol":{"name":"CHAR_CONST","isTerminal":true},"tooltip":"One single character"},{"symbol":{"name":"STRING_CONST","isTerminal":true},"tooltip":"Any sequence of characters or the empty sequence"},{"symbol":{"name":"BOOLEAN_CONST","isTerminal":false},"tooltip":"One of true or false"},{"symbol":{"name":"ARRAY_CONST","isTerminal":false},"tooltip":"An array of elements"},{"symbol":{"name":"OBJECT_CONST","isTerminal":false},"tooltip":"Variable with many values as pairs (name:value)"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"Right operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"initialization_expr"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":3,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"SEMICOLON","isTerminal":true},"alias":";"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"i","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"The first operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"LESS","isTerminal":true},"alias":"<","tooltip":"Returns true if the first operand is less than the second operand, else returns false"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"rel_op","isTerminal":false},"tooltip":"A comparison operator that returns true or false (e.g <, >)"},"alternateSymbols":[{"symbol":{"name":"GREATER","isTerminal":true},"alias":">","tooltip":"Returns true if the first operand is greater than the second operand, else returns false"},{"symbol":{"name":"LESS","isTerminal":true},"alias":"<","tooltip":"Returns true if the first operand is less than the second operand, else returns false"},{"symbol":{"name":"EQUAL_TO","isTerminal":true},"alias":"==","tooltip":"Returns true if the first operand is equal to the second operand, else returns false"},{"symbol":{"name":"EQUAL_VALUE_TYPE","isTerminal":true},"alias":"===","tooltip":"Returns true if the first operand is equal and has the same type to the second operand, else returns false"},{"symbol":{"name":"NOT_EQUAL_TO","isTerminal":true},"alias":"!=","tooltip":"Returns true if the first operand not equal to the second operand, else returns false"},{"symbol":{"name":"NOT_EQUAL_VALUE_TYPE","isTerminal":true},"alias":"!==","tooltip":"Returns true if the first operand not equal or has different type to the second operand, else returns false"},{"symbol":{"name":"GREATER_EQUAL","isTerminal":true},"alias":">=","tooltip":"Returns true if the first operand is greater than or equal to the second operand, else returns false"},{"symbol":{"name":"LESS_EQUAL","isTerminal":true},"alias":"<=","tooltip":"Returns true if the first operand is less than or equal to the second operand, else returns false"}],"selectedSymbol":1,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"n","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"The second operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"condition_expr"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":1,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"SEMICOLON","isTerminal":true},"alias":";"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"unary_expr_after","isTerminal":false},"tooltip":"The unary operator after the operand"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"i","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"The single operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"PLUS_PLUS","isTerminal":true},"alias":"++","tooltip":"Post-increament of the operand value by one"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"unary_op_af","isTerminal":false},"tooltip":"Unary operator with one operand"},"alternateSymbols":[{"symbol":{"name":"PLUS_PLUS","isTerminal":true},"alias":"++","tooltip":"Post-increament of the operand value by one"},{"symbol":{"name":"SUB_SUB","isTerminal":true},"alias":"--","tooltip":"Post-decreament of the operand value by one"}],"selectedSymbol":0,"type":"SelectionBlock"}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"unary_expr","isTerminal":false},"tooltip":"Unary expression operator with single operand,either before or after the operator"},"alternateSymbols":[{"symbol":{"name":"unary_expr_before","isTerminal":false},"tooltip":"The unary operator before the operand"},{"symbol":{"name":"unary_expr_after","isTerminal":false},"tooltip":"The unary operator after the operand"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},"alternateSymbols":[{"symbol":{"name":"binary_arith_expr","isTerminal":false},"tooltip":"An arithmetic expression with two operands"},{"symbol":{"name":"unary_expr","isTerminal":false},"tooltip":"Unary expression operator with single operand,either before or after the operator"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"step_expr"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":0,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"RP","isTerminal":true},"alias":")"},"type":"SimpleBlock"},{"type":"NewLine"},{"type":"TabBlock"},{"symbol":{"symbol":{"name":"LB","isTerminal":true},"alias":"{"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"stmts","isTerminal":false},"alias":"for_part"},"elems":[{"symbol":{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},"elems":[{"symbol":{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"},"elems":[{"symbol":{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"types","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},{"symbol":{"name":"let","isTerminal":true},"tooltip":"The scope of a let variable is block scope"},{"symbol":{"name":"const","isTerminal":true},"tooltip":"The scope of a const variable is block scope"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Select type of identifier"},"userInput_":"inp","type":"InputBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"Left operand to be assigned"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock"}}},{"symbol":{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"assign_op","isTerminal":false},"tooltip":"Assign operator, simple or with an operation "},"alternateSymbols":[{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},{"symbol":{"name":"PLUS_ASSIGN","isTerminal":true},"alias":"+=","tooltip":"Sums up left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"SUB_ASSIGN","isTerminal":true},"alias":"-=","tooltip":"Subtract right operand value from the left operand value and assigns the result to the left operand"},{"symbol":{"name":"MULT_ASSIGN","isTerminal":true},"alias":"*=","tooltip":"Multiply left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"DIV_ASSIGN","isTerminal":true},"alias":"/=","tooltip":"Divide left operand value by right operand value and assign the result to the left operand"},{"symbol":{"name":"MOD_ASSIGN","isTerminal":true},"alias":"%=","tooltip":"Get the modulus of left operand divide by right operand and assign resulted modulus to the left operand"},{"symbol":{"name":"EXP_ASSIGN","isTerminal":true},"alias":"**=","tooltip":"Raises the value of left operand to the power of the right operand and assign the result to the left operand"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},"elems":[{"symbol":{"symbol":{"name":"prompt","isTerminal":true}},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"LP","isTerminal":true},"alias":"("},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"STRING_CONST","isTerminal":true},"alias":"prompt_message"},"userInput_":"Give value for the array","type":"InputBlock"},{"symbol":{"symbol":{"name":"RP","isTerminal":true},"alias":")"},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},"alternateSymbols":[{"symbol":{"name":"math_call","isTerminal":false},"tooltip":"Use a built-in math function"},{"symbol":{"name":"string_method_call","isTerminal":false},"tooltip":"Use a built-in string method"},{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},{"symbol":{"name":"object_method_call","isTerminal":false},"tooltip":"Use a built-in object method"},{"symbol":{"name":"function_call","isTerminal":false},"tooltip":"Use a user-defined function as \"name(params);\""},{"symbol":{"name":"print_call","isTerminal":false},"tooltip":"Use a built-in function to print the value of the given expression (text, number etc.)"},{"symbol":{"name":"output_color","isTerminal":false},"tooltip":"Change the color of the text in the output console"},{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},{"symbol":{"name":"key_event","isTerminal":false},"tooltip":"Add and remove event listener for a key of your choice"},{"symbol":{"name":"type_of","isTerminal":false},"tooltip":"Typeof operator returns the data type of a variable e.g function,string,number,boolean,object"}],"selectedSymbol":7,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"Right operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":4,"type":"SelectionBlock"}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":3,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":5,"type":"SelectionBlock"}}},{"type":"NewLine"},{"symbol":{"symbol":{"name":"array_set","isTerminal":false},"tooltip":"Modify an element in a position of the array to a new character"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"alias":"arrayName"},"userInput_":"array","type":"InputBlock"},{"symbol":{"symbol":{"name":"LSB","isTerminal":true},"alias":"["},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"i","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"index"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":5,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"RSB","isTerminal":true},"alias":"]"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"="},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"inp","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"element"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":5,"type":"SelectionBlock"}}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},"alternateSymbols":[{"symbol":{"name":"array_get","isTerminal":false},"alias":"get","tooltip":"Get an element by its position in the array"},{"symbol":{"name":"array_set","isTerminal":false},"alias":"set","tooltip":"Modify an element in a position of the array to a new value"},{"symbol":{"name":"array_push","isTerminal":false},"alias":"push","tooltip":"Insert an element at the end of the array"},{"symbol":{"name":"array_pop","isTerminal":false},"alias":"pop","tooltip":"Returns the last element of the array"},{"symbol":{"name":"array_size","isTerminal":false},"alias":"length","tooltip":"Get the number of elements in the array"},{"symbol":{"name":"array_join","isTerminal":false},"alias":"join","tooltip":"Joins all array elements into a string, you can specify the separator"},{"symbol":{"name":"array_to_string","isTerminal":false},"alias":"tostring","tooltip":"Converts an array to a string of (comma separated) array values"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},"alternateSymbols":[{"symbol":{"name":"math_call","isTerminal":false},"tooltip":"Use a built-in math function"},{"symbol":{"name":"string_method_call","isTerminal":false},"tooltip":"Use a built-in string method"},{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},{"symbol":{"name":"object_method_call","isTerminal":false},"tooltip":"Use a built-in object method"},{"symbol":{"name":"function_call","isTerminal":false},"tooltip":"Use a user-defined function as \"name(params);\""},{"symbol":{"name":"print_call","isTerminal":false},"tooltip":"Use a built-in function to print the value of the given expression (text, number etc.)"},{"symbol":{"name":"output_color","isTerminal":false},"tooltip":"Change the color of the text in the output console"},{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},{"symbol":{"name":"key_event","isTerminal":false},"tooltip":"Add and remove event listener for a key of your choice"},{"symbol":{"name":"type_of","isTerminal":false},"tooltip":"Typeof operator returns the data type of a variable e.g function,string,number,boolean,object"}],"selectedSymbol":2,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":4,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":5,"type":"SelectionBlock"}}}}}],"repetitiveElem":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"type":"SelectionBlock"},"type":"RepetitionGroup"},{"symbol":{"symbol":{"name":"RB","isTerminal":true},"alias":"}"},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":3,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"def","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"stmt","isTerminal":false}},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock"}}},{"type":"NewLine"},{"symbol":{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Print all the elements of an array."},"elems":[{"symbol":{"symbol":{"name":"for","isTerminal":true}},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"LP","isTerminal":true},"alias":"("},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},"elems":[{"symbol":{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"},"elems":[{"symbol":{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"types","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"var","isTerminal":true},"tooltip":"The scope of a var variable is functional scope"},{"symbol":{"name":"let","isTerminal":true},"tooltip":"The scope of a let variable is block scope"},{"symbol":{"name":"const","isTerminal":true},"tooltip":"The scope of a const variable is block scope"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Select type of identifier"},"userInput_":"i","type":"InputBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"Left operand to be assigned"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock"}}},{"symbol":{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"assign_op","isTerminal":false},"tooltip":"Assign operator, simple or with an operation "},"alternateSymbols":[{"symbol":{"name":"ASSIGN","isTerminal":true},"alias":"=","tooltip":"Assigns the right operand to the left operand"},{"symbol":{"name":"PLUS_ASSIGN","isTerminal":true},"alias":"+=","tooltip":"Sums up left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"SUB_ASSIGN","isTerminal":true},"alias":"-=","tooltip":"Subtract right operand value from the left operand value and assigns the result to the left operand"},{"symbol":{"name":"MULT_ASSIGN","isTerminal":true},"alias":"*=","tooltip":"Multiply left and right operand values and assigns the result to the left operand"},{"symbol":{"name":"DIV_ASSIGN","isTerminal":true},"alias":"/=","tooltip":"Divide left operand value by right operand value and assign the result to the left operand"},{"symbol":{"name":"MOD_ASSIGN","isTerminal":true},"alias":"%=","tooltip":"Get the modulus of left operand divide by right operand and assign resulted modulus to the left operand"},{"symbol":{"name":"EXP_ASSIGN","isTerminal":true},"alias":"**=","tooltip":"Raises the value of left operand to the power of the right operand and assign the result to the left operand"}],"selectedSymbol":0,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"INT_CONST","isTerminal":true},"tooltip":"An integer is a positive, zero, or negative number that can be written without a fractional component (i.e. no decimal point places)"},"userInput_":"0","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},"alternateSymbols":[{"symbol":{"name":"INT_CONST","isTerminal":true},"tooltip":"An integer is a positive, zero, or negative number that can be written without a fractional component (i.e. no decimal point places)"},{"symbol":{"name":"FLOAT_CONST","isTerminal":true},"tooltip":"A floating-point number is a rational number (i.e. includes numbers with decimal point places"},{"symbol":{"name":"CHAR_CONST","isTerminal":true},"tooltip":"One single character"},{"symbol":{"name":"STRING_CONST","isTerminal":true},"tooltip":"Any sequence of characters or the empty sequence"},{"symbol":{"name":"BOOLEAN_CONST","isTerminal":false},"tooltip":"One of true or false"},{"symbol":{"name":"ARRAY_CONST","isTerminal":false},"tooltip":"An array of elements"},{"symbol":{"name":"OBJECT_CONST","isTerminal":false},"tooltip":"Variable with many values as pairs (name:value)"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"Right operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"initialization_expr"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":3,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"SEMICOLON","isTerminal":true},"alias":";"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"i","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"The first operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"LESS","isTerminal":true},"alias":"<","tooltip":"Returns true if the first operand is less than the second operand, else returns false"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"rel_op","isTerminal":false},"tooltip":"A comparison operator that returns true or false (e.g <, >)"},"alternateSymbols":[{"symbol":{"name":"GREATER","isTerminal":true},"alias":">","tooltip":"Returns true if the first operand is greater than the second operand, else returns false"},{"symbol":{"name":"LESS","isTerminal":true},"alias":"<","tooltip":"Returns true if the first operand is less than the second operand, else returns false"},{"symbol":{"name":"EQUAL_TO","isTerminal":true},"alias":"==","tooltip":"Returns true if the first operand is equal to the second operand, else returns false"},{"symbol":{"name":"EQUAL_VALUE_TYPE","isTerminal":true},"alias":"===","tooltip":"Returns true if the first operand is equal and has the same type to the second operand, else returns false"},{"symbol":{"name":"NOT_EQUAL_TO","isTerminal":true},"alias":"!=","tooltip":"Returns true if the first operand not equal to the second operand, else returns false"},{"symbol":{"name":"NOT_EQUAL_VALUE_TYPE","isTerminal":true},"alias":"!==","tooltip":"Returns true if the first operand not equal or has different type to the second operand, else returns false"},{"symbol":{"name":"GREATER_EQUAL","isTerminal":true},"alias":">=","tooltip":"Returns true if the first operand is greater than or equal to the second operand, else returns false"},{"symbol":{"name":"LESS_EQUAL","isTerminal":true},"alias":"<=","tooltip":"Returns true if the first operand is less than or equal to the second operand, else returns false"}],"selectedSymbol":1,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"array_size","isTerminal":false},"alias":"length","tooltip":"Get the number of elements in the array"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"alias":"arrayName"},"userInput_":"array","type":"InputBlock"},{"symbol":{"symbol":{"name":"DOT","isTerminal":true},"alias":"."},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"length","isTerminal":true}},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},"alternateSymbols":[{"symbol":{"name":"array_get","isTerminal":false},"alias":"get","tooltip":"Get an element by its position in the array"},{"symbol":{"name":"array_set","isTerminal":false},"alias":"set","tooltip":"Modify an element in a position of the array to a new character"},{"symbol":{"name":"array_push","isTerminal":false},"alias":"push","tooltip":"Insert an element at the end of the array"},{"symbol":{"name":"array_pop","isTerminal":false},"alias":"pop","tooltip":"Returns the last element of the array"},{"symbol":{"name":"array_size","isTerminal":false},"alias":"length","tooltip":"Get the number of elements in the array"},{"symbol":{"name":"array_join","isTerminal":false},"alias":"join","tooltip":"Joins all array elements into a string, you can specify the separator"},{"symbol":{"name":"array_to_string","isTerminal":false},"alias":"tostring","tooltip":"Converts an array to a string of (comma separated) array values"}],"selectedSymbol":4,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},"alternateSymbols":[{"symbol":{"name":"math_call","isTerminal":false},"tooltip":"Use a built-in math function"},{"symbol":{"name":"string_method_call","isTerminal":false},"tooltip":"Use a built-in string method"},{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},{"symbol":{"name":"object_method_call","isTerminal":false},"tooltip":"Use a built-in object method"},{"symbol":{"name":"function_call","isTerminal":false},"tooltip":"Use a user-defined function as \"name(params);\""},{"symbol":{"name":"print_call","isTerminal":false},"tooltip":"Use a built-in function to print the value of the given expression (text, number etc.)"},{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},{"symbol":{"name":"key_event","isTerminal":false},"tooltip":"Add and remove event listener for a key of your choice"},{"symbol":{"name":"type_of","isTerminal":false},"tooltip":"Typeof operator returns the data type of a variable e.g function,string,number,boolean,object"}],"selectedSymbol":2,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"The second operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":4,"type":"SelectionBlock"}}}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"condition_expr"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":1,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"SEMICOLON","isTerminal":true},"alias":";"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"unary_expr_after","isTerminal":false},"tooltip":"The unary operator after the operand"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"i","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element by its property name in the object"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element by its position in the array"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Function definition"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"tooltip":"The single operand"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"PLUS_PLUS","isTerminal":true},"alias":"++","tooltip":"Post-increament of the operand value by one"},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"unary_op_af","isTerminal":false},"tooltip":"Unary operator with one operand"},"alternateSymbols":[{"symbol":{"name":"PLUS_PLUS","isTerminal":true},"alias":"++","tooltip":"Post-increament of the operand value by one"},{"symbol":{"name":"SUB_SUB","isTerminal":true},"alias":"--","tooltip":"Post-decreament of the operand value by one"}],"selectedSymbol":0,"type":"SelectionBlock"}}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"unary_expr","isTerminal":false},"tooltip":"Unary expression operator with single operand,either before or after the operator"},"alternateSymbols":[{"symbol":{"name":"unary_expr_before","isTerminal":false},"tooltip":"The unary operator before the operand"},{"symbol":{"name":"unary_expr_after","isTerminal":false},"tooltip":"The unary operator after the operand"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},"alternateSymbols":[{"symbol":{"name":"binary_arith_expr","isTerminal":false},"tooltip":"An arithmetic expression with two operands"},{"symbol":{"name":"unary_expr","isTerminal":false},"tooltip":"Unary expression operator with single operand,either before or after the operator"}],"selectedSymbol":1,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"step_expr"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":0,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"RP","isTerminal":true},"alias":")"},"type":"SimpleBlock"},{"type":"NewLine"},{"type":"TabBlock"},{"symbol":{"symbol":{"name":"LB","isTerminal":true},"alias":"{"},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"stmts","isTerminal":false},"alias":"for_part"},"elems":[{"symbol":{"symbol":{"name":"print_call","isTerminal":false},"tooltip":"Use a built-in function to print the value of the given expression (text, number etc.)"},"elems":[{"symbol":{"symbol":{"name":"console.log","isTerminal":true}},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"blue","isTerminal":true}},"type":"SimpleBlock","generatedBy":{"symbol":{"symbol":{"name":"color","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"black","isTerminal":true}},{"symbol":{"name":"red","isTerminal":true}},{"symbol":{"name":"blue","isTerminal":true}},{"symbol":{"name":"green","isTerminal":true}},{"symbol":{"name":"yellow","isTerminal":true}},{"symbol":{"name":"cyan","isTerminal":true}},{"symbol":{"name":"magenta","isTerminal":true}},{"symbol":{"name":"rgb_color","isTerminal":false},"tooltip":"Define the color as rgb"}],"selectedSymbol":2,"type":"SelectionBlock"}},{"symbol":{"symbol":{"name":"LP","isTerminal":true},"alias":"("},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"expr_list","isTerminal":false}},"elems":[{"symbol":{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},"elems":[{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"alias":"arrayName"},"userInput_":"array","type":"InputBlock"},{"symbol":{"symbol":{"name":"LSB","isTerminal":true},"alias":"["},"type":"SimpleBlock"},{"symbol":{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},"userInput_":"i","type":"InputBlock","generatedBy":{"symbol":{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},"alternateSymbols":[{"symbol":{"name":"IDENT","isTerminal":true},"tooltip":"Identifier without type. If the variable is not declared, it is automatically declared with var"},{"symbol":{"name":"ident_type","isTerminal":false},"tooltip":"Identifier with type"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"index"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}},{"symbol":{"symbol":{"name":"RSB","isTerminal":true},"alias":"]"},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"},"alternateSymbols":[{"symbol":{"name":"variable","isTerminal":false},"tooltip":"An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"},{"symbol":{"name":"consts","isTerminal":false},"tooltip":"All const values"},{"symbol":{"name":"keys","isTerminal":false},"tooltip":"All keyboard keys"},{"symbol":{"name":"object_get","isTerminal":false},"tooltip":"Get an element of an object by its property name"},{"symbol":{"name":"array_get","isTerminal":false},"tooltip":"Get an element of an array by its position"},{"symbol":{"name":"new_array","isTerminal":false},"tooltip":"Define a new array"},{"symbol":{"name":"new_object","isTerminal":false},"tooltip":"Define a new object"},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":4,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"arg"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":6,"type":"SelectionBlock"}}}],"repetitiveElem":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"arg"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"type":"SelectionBlock"},"type":"RepetitionGroup"},{"symbol":{"symbol":{"name":"RP","isTerminal":true},"alias":")"},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},"alternateSymbols":[{"symbol":{"name":"math_call","isTerminal":false},"tooltip":"Use a built-in math function"},{"symbol":{"name":"string_method_call","isTerminal":false},"tooltip":"Use a built-in string method"},{"symbol":{"name":"array_method_call","isTerminal":false},"tooltip":"Use a built-in array method"},{"symbol":{"name":"object_method_call","isTerminal":false},"tooltip":"Use a built-in object method"},{"symbol":{"name":"function_call","isTerminal":false},"tooltip":"Use a user-defined function as \"name(params);\""},{"symbol":{"name":"print_call","isTerminal":false},"tooltip":"Use a built-in function to print the value of the given expression (text, number etc.)"},{"symbol":{"name":"output_color","isTerminal":false},"tooltip":"Change the color of the text in the output console"},{"symbol":{"name":"input","isTerminal":false},"tooltip":"Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"},{"symbol":{"name":"key_event","isTerminal":false},"tooltip":"Add and remove event listener for a key of your choice"},{"symbol":{"name":"type_of","isTerminal":false},"tooltip":"Typeof operator returns the data type of a variable e.g function,string,number,boolean,object"}],"selectedSymbol":5,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},"alternateSymbols":[{"symbol":{"name":"arith_expr","isTerminal":false},"tooltip":"Perform a mathematic operation"},{"symbol":{"name":"rel_expr","isTerminal":false},"tooltip":"An operator that compares the two operands and returns true or false"},{"symbol":{"name":"logical_expr","isTerminal":false},"tooltip":"An expression that evaluates to true or false"},{"symbol":{"name":"assign_expr","isTerminal":false},"tooltip":"Set a variable's value"},{"symbol":{"name":"call_expr","isTerminal":false},"tooltip":"Call a user-defined or built-in function/method"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"primary_expr","isTerminal":false},"tooltip":"An identifier or a constant"}],"selectedSymbol":4,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":5,"type":"SelectionBlock"}}}}],"repetitiveElem":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"type":"SelectionBlock"},"type":"RepetitionGroup"},{"symbol":{"symbol":{"name":"RB","isTerminal":true},"alias":"}"},"type":"SimpleBlock"}],"type":"Group","generatedBy":{"symbol":{"symbol":{"name":"stmt","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"if_stmt","isTerminal":false},"tooltip":"Do something if a condition is true"},{"symbol":{"name":"if_else_stmt","isTerminal":false},"tooltip":"Do something if a condition is true, else do something else"},{"symbol":{"name":"while_stmt","isTerminal":false},"tooltip":"Do something while a condition is true"},{"symbol":{"name":"for_stmt","isTerminal":false},"tooltip":"Do something while a condition is true. Commonly used with a known number of iterations."},{"symbol":{"name":"repeat_stmt","isTerminal":false},"tooltip":"Repeat the stmts, certain times"},{"symbol":{"name":"expr","isTerminal":false},"alias":"expr_stmt","tooltip":"A single expression as a statement"},{"symbol":{"name":"turtle_functions","isTerminal":false},"tooltip":"Build-in functions to move the turtle in the virtual canvas"},{"symbol":{"name":"ternary_stmt","isTerminal":false},"tooltip":"A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."},{"symbol":{"name":"break_stmt","isTerminal":false},"tooltip":"Exit from the current loop"},{"symbol":{"name":"continue_stmt","isTerminal":false},"tooltip":"Continue to the next iteration of the current loop"},{"symbol":{"name":"return_stmt","isTerminal":false},"tooltip":"Return an expression as the result of the current function"}],"selectedSymbol":3,"type":"SelectionBlock","generatedBy":{"symbol":{"symbol":{"name":"def","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"stmt","isTerminal":false}},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"selectedSymbol":0,"type":"SelectionBlock"}}}],"repetitiveElem":{"symbol":{"symbol":{"name":"def","isTerminal":false}},"alternateSymbols":[{"symbol":{"name":"stmt","isTerminal":false}},{"symbol":{"name":"func_definition","isTerminal":false},"tooltip":"Define reusable code as a function"}],"type":"SelectionBlock"},"type":"RepetitionGroup"}