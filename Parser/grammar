non_terminal {
    program
    stmts
    stmt
    snipets
    defs
    def
    consts
    variable types ident_type type_of
    if_stmt if_else_stmt while_stmt for_stmt expr ternary_stmt break_stmt continue_stmt return_stmt
    func_definition named_func anonymous_func
    new_array new_object
    arith_expr rel_expr logical_expr assign_expr call_expr primary_expr
    binary_arith_expr unary_expr 
    unary_expr_before unary_expr_after
    arith_op rel_op logical_binary_op unary_op_af unary_op_bf assign_op
    binary_logical_expr not_expr
    BOOLEAN_CONST ARRAY_CONST OBJECT_CONST
    ident_list expr_list element_list pair_element_list pair_element
    math_call string_method_call array_method_call object_method_call function_call print_call input callee
    key_event add_key_press remove_key_press keys
    object_function array_function
    math_abs math_pow math_sqrt math_round math_floor math_ceil math_sin math_cos
    string_method
    string_concat string_upperCase string_lowCase string_substring string_size string_slice
    array_get array_push array_pop array_set array_size array_join array_to_string
    object_get object_insert object_delete object_set object_size
    object_get_sq object_get_dot
    turtle_functions 
    forward_turtle backward_turtle turn_right turn_left goto_position define_angle define_widthline define_turtleshape change_color write_msg random_int set_redraw set_wrap set_delay
    shapes color rgb_color output_color
    repeat_stmt
    widgets create_element change_attribute add_event_handler get_element_value
    new_window new_button new_textarea new_textfield new_checkbox new_dropdown new_slider options
    change_window change_button change_textfield change_textarea change_checkbox change_dropdown change_slider
    window_width window_height window_color
    button_disabled button_text button_color button_width button_height button_position
    textfield_width textfield_position textfield_value textfield_maxlength
    textarea_height textarea_width textarea_position textarea_maxlength
    checkbox_position checkbox_text checkbox_checked
    dropdown_position dropdown_multiple dropdown_add_option
    slider_position slider_label slider_min slider_max
    button_event checkbox_event dropdown_event
    get_textarea_value  get_textfield_value get_slider_value    
}

terminal {
    PLUS SUB MULT EXP DIV MODULO UMINUS UPLUS PLUS_PLUS SUB_SUB
    GREATER LESS EQUAL_TO EQUAL_VALUE_TYPE NOT_EQUAL_TO NOT_EQUAL_VALUE_TYPE GREATER_EQUAL LESS_EQUAL
    AND OR NOT
    ASSIGN PLUS_ASSIGN SUB_ASSIGN MULT_ASSIGN DIV_ASSIGN MOD_ASSIGN EXP_ASSIGN
    LP RP LB RB LSB RSB COLON SEMICOLON DOT QM PARENTH_CALL
    true false
    if else while for break continue return
    function
    "Math" "console.log" "prompt"
    abs pow sqrt round floor ceil sin cos 
    push pop set join tostring
    delete length
    concat toUpperCase toLowerCase substring slice 
    typeof
    var let const
    "add_on_key_press" "remove_on_key_press"
    Escape F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 ScrollLock Pause Insert
    Backquote Digit0 Digit1 Digit2 Digit3 Digit4 Digit5 Digit6 Digit7 Digit8 Digit9 Minus Equal Backspace End Home
    Tab BracketLeft BracketRight Backslash CapsLock Semicolon Quote Enter ShiftLeft Comma Period Slash ShiftRight
    ControlLeft OSLeft AltLeft Space AltRight ContextMenu ControlRight Delete PageUp PageDown ArrowLeft ArrowUp ArrowRight ArrowDown
    KeyA KeyB KeyC KeyD KeyE KeyF KeyG KeyH KeyI KeyJ KeyK KeyL KeyM KeyN KeyO KeyR KeyS KeyT KeyU KeyV KeyW KeyX KeyY KeyZ
    Numpad0 Numpad1 Numpad2 Numpad3 Numpad4 Numpad5 Numpad6 Numpad7 Numpad8 Numpad9 NumpadMultiply NumpadAdd NumpadDecimal NumpadSubstract NumpadDivide NumLock
    forward  backward right left goto clear penup pendown reset angle width shape colour write random hide_turtle show_turtle redrawOnMove draw wrap delay
    triangle circle square turtle  
    repeat set_console_color
    black red blue green yellow cyan magenta
    on window button textarea textfield checkbox dropdown slider
    change disable text label background new_width new_height checked multiple new_option min max
    on_press on_select get_value
}  

define program {
    defs
}

define defs {
    list_of def
}

define stmts {
    list_of stmt
}
 
define stmt {
    any_of {
        if_stmt                     : "Do something if a condition is true"
        if_else_stmt                : "Do something if a condition is true, else do something else"
        while_stmt                  : "Do something while a condition is true"
        for_stmt                    : "Do something while a condition is true. Commonly used with a known number of iterations."
        repeat_stmt                 : "Repeat the stmts, certain times"
        expr(expr_stmt)             : "A single expression as a statement"
        turtle_functions            : "Build-in functions to move the turtle in the virtual canvas"
        widgets                     : "Create,change and add event handlers to ui elements such as buttons, textfields etc"
        ternary_stmt                : "A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."
        break_stmt                  : "Exit from the current loop"
        continue_stmt               : "Continue to the next iteration of the current loop"
        return_stmt                 : "Return an expression as the result of the current function"
    }
}

define def {
    any_of {
        stmt
        func_definition             : "Define reusable code as a function"
    }
}


define expr {
    any_of {
        arith_expr                  : "Perform a mathematic operation"
        rel_expr                    : "An operator that compares the two operands and returns true or false"
        logical_expr                : "An expression that evaluates to true or false"
        assign_expr                 : "Set a variable's value"
        call_expr                   : "Call a user-defined or built-in function/method"
        ternary_stmt                : "A statement with ternary operator has a condition, an expression to execute if the condition is truthy,and the expression to execute if the condition is falsy."
        primary_expr                : "An identifier or a constant"
    }
}


define arith_expr {
    any_of {
        binary_arith_expr           : "An arithmetic expression with two operands"
        unary_expr                  : "Unary expression operator with single operand,either before or after the operator"
    }
}

define binary_arith_expr {
    expr                            : "The first operand"
    arith_op                        : "An arithmetic operator(e.g. +, -)"
    expr                            : "The second operand"
}

define unary_expr{
    any_of {
        unary_expr_before           :"The unary operator before the operand"
        unary_expr_after            :"The unary operator after the operand"
    }
}

define unary_expr_after {
    expr                            : "The single operand"
    unary_op_af                     : "Unary operator with one operand"
}   

define unary_expr_before {
    unary_op_bf                     : "Unary operator with one operand"
    expr                            : "The single operand"
}

define unary_op_af {
    any_of {
        PLUS_PLUS("++")             : "Post-increament of the operand value by one"
        SUB_SUB("--")               : "Post-decreament of the operand value by one"
    }
}

define unary_op_bf {
    any_of {
        UMINUS("-")                 : "Negates the value of its operand"
        UPLUS("+")                  : "Attempts to convert the operand to a number, if it is not already"
        PLUS_PLUS("++")             : "Pre-increament of the operand value by one"
        SUB_SUB("--")               : "Pre-decreament of the operand value by one"
    }
}

define arith_op {
    any_of {
        PLUS("+")                   : "Performs addition"
        SUB("-")                    : "Performs subtraction"
        MULT("*")                   : "Performs multipliction"
        EXP("**")                   : "Performs exponentation"
        DIV("/")                    : "Performs division"
        MODULO("%")                 : "Performs the modulo operation"
    }
}

define rel_expr {
    expr                            : "The first operand"
    rel_op                          : "A comparison operator that returns true or false (e.g <, >)"
    expr                            : "The second operand"
}

define rel_op {
    any_of {
        GREATER(">")                : "Returns true if the first operand is greater than the second operand, else returns false"
        LESS("<")                   : "Returns true if the first operand is less than the second operand, else returns false"
        EQUAL_TO("==")              : "Returns true if the first operand is equal to the second operand, else returns false"
        EQUAL_VALUE_TYPE("===")     : "Returns true if the first operand is equal and has the same type to the second operand, else returns false"   
        NOT_EQUAL_TO("!=")          : "Returns true if the first operand not equal to the second operand, else returns false"
        NOT_EQUAL_VALUE_TYPE("!==") : "Returns true if the first operand not equal or has different type to the second operand, else returns false"
        GREATER_EQUAL(">=")         : "Returns true if the first operand is greater than or equal to the second operand, else returns false"
        LESS_EQUAL("<=")            : "Returns true if the first operand is less than or equal to the second operand, else returns false"    
    }
}

define logical_expr {
    any_of {
        binary_logical_expr         : "Performs a binary operation with two operands"
        not_expr                    : "Performs logical negation. True becomes false and false becomes true"
    }
}

define binary_logical_expr {
    expr                            : "The first operand"
    logical_binary_op               : "Performs a binary operation with two operands"
    expr                            : "The second operand"
}

define logical_binary_op {
    any_of {
        AND("&&")                   : "Returns true if both operands are true, else returns false"
        OR("||")                    : "Returns true if either operand is true, else returns false"
    }
}

define not_expr {
    NOT("!")                        : "Returns true if the operand is false, else returns false"
    expr                            : "The operand"
}   

define variable {
    any_of {
        IDENT                       :"Identifier without type. If the variable is not declared, it is automatically declared with var"
        ident_type                  :"Identifier with type"
    }
}

define ident_type {
    types IDENT                     :"Select type of identifier"
}

define types {
    any_of {
        var                         :"The scope of a var variable is functional scope"
        let                         :"The scope of a let variable is block scope"
        const                       :"The scope of a const variable is block scope"
    }
}

define primary_expr {
    any_of {
        variable                    : "An identifier starting with _ or a uppercase/lowercase letter following by 0 or more characters that can be _ numbers lowercase/uppercase letters"
        consts                      : "All const values"
        keys                        : "All keyboard keys"
        object_get                  : "Get an element of an object by its property name"
        array_get                   : "Get an element of an array by its position"
        new_array                   : "Define a new array"
        new_object                  : "Define a new object"
        func_definition             : "Define reusable code as a function"
    }
}

define consts{
    any_of {
        INT_CONST                   : "An integer is a positive, zero, or negative number that can be written without a fractional component (i.e. no decimal point places)"
        FLOAT_CONST                 : "A floating-point number is a rational number (i.e. includes numbers with decimal point places"
        CHAR_CONST                  : "One single character"
        STRING_CONST                : "Any sequence of characters or the empty sequence"
        BOOLEAN_CONST               : "One of true or false"
        ARRAY_CONST                 : "An array of elements"
        OBJECT_CONST                : "Variable with many values as pairs (name:value)"
    }
}

define BOOLEAN_CONST {
    any_of {
        true
        false
    }
}

define new_array {
    expr("array name") ASSIGN("=") ARRAY_CONST
}
 
define ARRAY_CONST {
    LSB("[") element_list RSB("]")
}

define element_list {
    list_of expr(element)
}

define new_object {
    expr("object name") ASSIGN("=") OBJECT_CONST
}

define OBJECT_CONST {
    LB("{") pair_element_list RB("}")
}

define pair_element_list {
    list_of pair_element
}

define pair_element {
    IDENT                           : "The identifier of the value"
    COLON(":")                      : "The pair"   
    expr(value)                     : "The value of the property"
}

define assign_expr {
    primary_expr                    :"Left operand to be assigned"
    assign_op                       :"Assign operator, simple or with an operation "
    expr                            :"Right operand"
}

define assign_op {
    any_of{
        ASSIGN("=")                     :"Assigns the right operand to the left operand"            
        PLUS_ASSIGN("+=")               :"Sums up left and right operand values and assigns the result to the left operand"
        SUB_ASSIGN("-=")                :"Subtract right operand value from the left operand value and assigns the result to the left operand"
        MULT_ASSIGN("*=")               :"Multiply left and right operand values and assigns the result to the left operand"
        DIV_ASSIGN("/=")                :"Divide left operand value by right operand value and assign the result to the left operand"
        MOD_ASSIGN("%=")                :"Get the modulus of left operand divide by right operand and assign resulted modulus to the left operand"
        EXP_ASSIGN("**=")               :"Raises the value of left operand to the power of the right operand and assign the result to the left operand"
    }
}

define func_definition{
    any_of{
        named_func                      :"Define a named function"
        anonymous_func                  :"Define an anonymous function"
    }
}

define named_func {
    function IDENT(name) LP("(") ident_list RP(")") LB("{") stmts RB("}")
}

define anonymous_func {
    function LP("(") ident_list RP(")") LB("{") stmts RB("}")
}

define break_stmt {
    break
}

define continue_stmt {
    continue
}

define return_stmt {
    return
    expr
}

define call_expr {
    any_of {
        math_call                       : "Use a built-in math function"
        string_method_call              : "Use a built-in string method"
        array_method_call               : "Use a built-in array method"
        object_method_call              : "Use a built-in object method"
        function_call                   : "Use a user-defined function as \"name(params);\""
        print_call                      : "Use a built-in function to print the value of the given expression (text, number etc.)"
        output_color                    : "Change the color of the text in the output console"
        input                           : "Displays a dialog box that prompts the user for input, you should assign it to a variable so as you can use it later"
        key_event                       : "Add and remove event listener for a key of your choice"
        type_of                         : "Typeof operator returns the data type of a variable e.g function,string,number,boolean,object"
    } 
}

define math_call {
    any_of {
        math_abs(abs)                   : "Returns the absolute value of a number"
        math_pow(pow)                   : "Returns base x to the exponent power y (that is, x^y)"
        math_sqrt(sqrt)                 : "Get the square root of a number"
        math_round(round)               : "Get the nearest integer to the given number"
        math_floor(floor)               : "Get the greatest integer less than or equal to the given number"
        math_ceil(ceil)                 : "Get the least integer greater than or equal to the given number"
        math_sin(sin)                   : "Get the sine of the given angle in degrees"
        math_cos(cos)                   : "Get the cosine of the given angle in degrees"
    }
}

define math_abs {
    "Math" DOT(".") abs LP("(") expr(value) RP(")")
}

define math_pow {
    "Math" DOT(".") pow LP("(") expr(number) expr(exponent) RP(")")
}

define math_sqrt {
    "Math" DOT(".") sqrt LP("(") expr(number) RP(")")
}

define math_round {
    "Math" DOT(".") round LP("(") expr(number) RP(")")
}

define math_floor {
    "Math" DOT(".") floor LP("(") expr(number) RP(")")
}

define math_ceil {
    "Math" DOT(".") ceil LP("(") expr(number) RP(")")
}

define math_sin {
    "Math" DOT(".") sin LP("(") expr(number) RP(")")
}

define math_cos {
    "Math" DOT(".") cos LP("(") expr(number) RP(")")
}

define string_method_call {
    expr("string") DOT(".") string_method
}

define string_method {
    any_of {
        string_concat(concat)                           : "Join two strings to one"
        string_upperCase(toUpperCase)                   : "A string is converted to upper case"
        string_lowCase(toLowCase)                       : "A string is converted to lower case"
        string_substring(substring)                     : "Get a substring of a string, giving a start position and an end position"
        string_size(length)                             : "Get the count of characters contained in the string"
        string_slice(slice)                             : "Extracts a part of a string and returns the extracted part in a new string, giving a start position and an end position"
    }
}

define string_concat {
    concat LP("(") expr("string2") RP(")")
}

define string_upperCase {
    toUpperCase PARENTH_CALL("()")
}

define string_lowCase {
    toLowerCase PARENTH_CALL("()")
}

define string_substring {
    substring LP("(") expr(start_index) expr(end_index) RP(")")
}

define string_size {
    length
}

define string_slice {
    slice LP("(") expr(start_index) expr(end_index) RP(")")
}

define array_method_call {
    any_of { 
        array_get(get)                  : "Get an element by its position in the array"
        array_set(set)                  : "Modify an element in a position of the array to a new value"
        array_push(push)                : "Insert an element at the end of the array"
        array_pop(pop)                  : "Returns the last element of the array"
        array_size(length)              : "Get the number of elements in the array"
        array_join(join)                : "Joins all array elements into a string, you can specify the separator"
        array_to_string(tostring)       : "Converts an array to a string of (comma separated) array values"
    }
}

define array_get {
    IDENT(arrayName) LSB("[") expr(index) RSB("]")
}

define array_push {
    IDENT(arrayName) DOT(".") push LP("(") expr(element) RP(")")
}

define array_pop {
    IDENT(arrayName) DOT(".") pop PARENTH_CALL("()")
}

define array_set {
    IDENT(arrayName) LSB("[") expr(index) RSB("]") ASSIGN("=") expr(element)
}

define array_size {
    IDENT(arrayName) DOT(".") length
}

define array_join {
    IDENT(arrayName) DOT(".") join LP("(") expr(seperator) RP(")")
}

define array_to_string {
    IDENT(arrayName) DOT(".") tostring  PARENTH_CALL("()")
}

define object_method_call {
    any_of { 
        object_get(get)                 : "Get an element by its property name in the object e.g objectName.property or objectName[property]"
        object_delete(delete)           : "Delete a pair (property:value) by property name"
        object_set(set)                 : "Modify a value by its property name in the object to a new value. If the property does not exist,the pair (property:value) will be added in the object"
        object_size(length)             : "Get the count of properties in the object"
    }
}

define object_get {
    any_of{
        object_get_dot                  : "Get with syntax objectName.property, property as ident"
        object_get_sq                   : "Get with syntax objectName[\"property\"], property as string"
    }
}

define object_get_dot {
    IDENT("object name") DOT(".") expr(property)
}

define object_get_sq {
    IDENT("object name") LSB("[") expr(property) RSB("]")
}

define object_delete {
    delete IDENT("object name") LSB("[") expr(property) RSB("]")
}

define object_set {
    IDENT("object name") LSB("[") expr(property) RSB("]") ASSIGN("=") expr(value)
}

define object_size {
    IDENT("object name") DOT(".") length
}

define callee {
    any_of {
        IDENT                           :"Name of a defined function"
        object_function                 :"Name of a function which is member of an object"
        array_function                  :"Name of a function which is member of an array"
        function_call                   :"To call nested functions"
        func_definition                 :"To call a function, the time you define it"
    }
}

define object_function {
    IDENT("object name") DOT(".") IDENT("function name")
}

define array_function {
    IDENT("array name") LSB("[") INT_CONST(index) RSB("]")
}

define function_call {
    callee("function name") LP("(") expr_list RP(")")
}

define print_call {
    "console.log" color LP("(") expr_list RP(")")
}

define output_color {
    set_console_color color       : "Change the color of the text in the output console"
}

define input {
    "prompt" LP("(") STRING_CONST(prompt_message) RP(")")
}

define key_event {
    any_of{
        add_key_press               : "Do something when a keyboard key of your choice is pressed"
        remove_key_press            : "Remove the event listener from a key, you should have assigned it to a variable"
    }
}

define add_key_press {
    "add_on_key_press" primary_expr("key") stmts("event")
}

define remove_key_press {
    "remove_on_key_press" primary_expr("listener")
}

define keys {
    any_of {
        Escape F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 ScrollLock Pause Insert
        Backquote Digit0 Digit1 Digit2 Digit3 Digit4 Digit5 Digit6 Digit7 Digit8 Digit9 Minus Equal Backspace End Home
        Tab BracketLeft BracketRight Backslash CapsLock Semicolon Quote Enter ShiftLeft Comma Period Slash ShiftRight
        ControlLeft OSLeft AltLeft Space AltRight ContextMenu ControlRight Delete PageUp PageDown ArrowLeft ArrowUp ArrowRight ArrowDown
        KeyA KeyB KeyC KeyD KeyE KeyF KeyG KeyH KeyI KeyJ KeyK KeyL KeyM KeyN KeyO KeyR KeyS KeyT KeyU KeyV KeyW KeyX KeyY KeyZ
        Numpad0 Numpad1 Numpad2 Numpad3 Numpad4 Numpad5 Numpad6 Numpad7 Numpad8 Numpad9 NumpadMultiply NumpadAdd NumpadDecimal NumpadSubstract NumpadDivide NumLock
    }
}

define type_of {
    typeof IDENT
}

define if_stmt {
    if LP("(") expr(condition_expr) RP(")") LB("{") stmts(if_part) RB("}")
}

define if_else_stmt {
    if LP("(") expr(condition_expr) RP(")") LB("{") stmts(if_part) RB("}") else LB("{") stmts(else_part) RB("}")
}

define while_stmt {
    while LP("(") expr(condition_expr) RP(")") LB("{") stmts(while_part) RB("}")
}

define for_stmt {
    for LP("(")
    expr(initialization_expr) SEMICOLON(";")
    expr(condition_expr) SEMICOLON(";")
    expr(step_expr) RP(")")
    LB("{") stmts(for_part) RB("}")
}

define ternary_stmt {
    expr(condition_expr) QM("?") expr(exprIfTrue) COLON(":") expr(exprIfFalse) 
}

define ident_list {
    list_of variable
}

define expr_list {
    list_of stmt(arg)
}

define turtle_functions {
    any_of{
        forward_turtle                            : "Moves the turtle forward by the specified amount,allowing for possible wrap-around at the boundaries of the canvas"
        backward_turtle                           : "Moves the turtle backward, allowing for possible wrap-around"
        turn_right                                : "Turns the turtle right by an angle in degrees"
        turn_left                                 : "Turns the turtle left by an angle in degrees"
        goto_position                             : "Move the turtle to position x,y (don't drwa on the way there)"
        clear                                     : "Clear the display, don't move the turtle"
        penup                                     : "Picks up the turtle's pen so as not to draw line"
        pendown                                   : "Puts down the turtle's pen so as to draw line"
        reset                                     : "Reset the whole system, clear the display and move turtle back to start position"
        define_angle                              : "Set the angle of the turtle in degrees"
        define_widthline                          : "Set the width of the line"
        define_turtleshape                        : "Set the turtle draw shape, currently supports triangle (default), circle, square and turtle"
        change_color                              : "Set the colour of the line using RGB values in the range 0 - 255"                                   
        write_msg                                 : "Write some text at the turtle position"            
        random_int                                : "Generate a random integer between low and high"
        hide_turtle                               : "Hide the turtle from the canvas"
        show_turtle                               : "Display the turtle in the canvas"
        set_redraw                                : "Turn on/off redrawing"
        draw                                      : "Draw the turtle and the current image"
        set_wrap                                  : "Turn edge wrapping on/off"
        set_delay                                 : "Call a function once after a period of time"
    }
}

define forward_turtle {
    forward primary_expr("distance")                                            : "Moves the turtle forward by the specified amount,allowing for possible wrap-around at the boundaries of the canvas"
}

define backward_turtle {
    backward primary_expr("distance")                                           :"Moves the turtle backward, allowing for possible wrap-around"
}

define turn_right {
    right primary_expr("angle")                                                 : "Turns the turtle right by an angle in degrees"
}

define turn_left {
    left primary_expr("angle")                                                  : "Turns the turtle left by an angle in degrees"
}

define goto_position {
    goto primary_expr("x") primary_expr("y")                                    : "Move the turtle to position x,y (don't drwa on the way there)"
}

define define_angle {
    angle primary_expr("angle")                                                 : "Set the angle of the turtle in degrees"
}

define define_widthline {
    width primary_expr("width")                                                 : "Set the width of the line"
}

define define_turtleshape {
    shape shapes                                                                : "Set the turtle draw shape, currently supports triangle (default), circle, square and turtle"
}

define shapes {
    any_of {
        triangle
        circle
        square
        turtle
    }
}

define change_color {
    colour INT_CONST("r") INT_CONST("g") INT_CONST("b") INT_CONST("a")          : "Set the colour of the line using RGB values in the range 0 - 255"   
}

define write_msg {
    write STRING_CONST("msg")                                                   : "Write some text at the turtle position"   
}   

define random_int {
    random INT_CONST("low") INT_CONST("high")                                   : "Generate a random integer between low and high"
}

define set_redraw{
    redrawOnMove BOOLEAN_CONST("on/off")                                        : "Turn on/off redrawing"
}

define set_wrap {
    wrap BOOLEAN_CONST("on/off")                                                : "Turn edge wrapping on/off"
}

define set_delay {
    delay IDENT("function") primary_expr("ms")                                  : "Call a function once after a period of time"
}

define repeat_stmt {
    repeat INT_CONST("times") stmts                                             : "Repeat the stmts, certain times"
}

define color {
    any_of {
        black
        red 
        blue 
        green 
        yellow 
        cyan 
        magenta
        rgb_color                                                               : "Define the color as rgb"
    }
}
    
define rgb_color {
    INT_CONST("r") INT_CONST("g") INT_CONST("b") INT_CONST("a")                 : "Set the color using RGB values in the range 0 - 255"   
}

define widgets {
    any_of {
        create_element                                                          : "Add a new element at the widgets window"
        change_attribute                                                        : "Change an attribute of a created element"
        add_event_handler                                                       : "Add event handler on a created element in the window"
        get_element_value                                                       : "Get the value of a textarea, textfield or slider, to use it later"
    }
}

define create_element {
    any_of {
        new_window                                                              : "Create new window on position (x,y) with certain width and height "                                                                                              
        new_button                                                              : "Create new button on position (x,y) with certain width,height and text on it" 
        new_textfield                                                           : "Create new textfield on position (x,y) with certain width "
        new_textarea                                                            : "Create new textarea on position (x,y) with certain width and height"
        new_checkbox                                                            : "Create new checkbox on position (x,y)"
        new_dropdown                                                            : "Create new dropdown on position (x,y)"
        new_slider                                                              : "Create new slider on position (x,y)"
    }
}

define new_window {
    window IDENT("window_name") on primary_expr("x") primary_expr("y") primary_expr("width") primary_expr("height") 
}

define new_button {
    IDENT("parent_window") button IDENT("button_name") on primary_expr("x") primary_expr("y") primary_expr("width") primary_expr("height") primary_expr("text")
}

define new_textfield {
    IDENT("parent_window") textfield IDENT("textfield_name") on primary_expr("x") primary_expr("y") primary_expr("width")
}

define new_textarea {
    IDENT("parent_window") textarea IDENT("textarea_name") on primary_expr("x") primary_expr("y") primary_expr("width") primary_expr("height") 
}

define new_checkbox {
    IDENT("parent_window") checkbox IDENT("checkbox_name") on primary_expr("x") primary_expr("y") primary_expr("text")
}

define new_dropdown {
    IDENT("parent_window") dropdown IDENT("dropdown_name") on primary_expr("x") primary_expr("y") options
}

define new_slider {
    IDENT("parent_window") slider IDENT("slider_name") on primary_expr("x") primary_expr("y") primary_expr("label")
}

define options {
    list_of {
        STRING_CONST("option")
    }
}

define change_attribute{
    any_of {
        change_window                                                           : "Change an attribute of a created window"
        change_button                                                           : "Change an attribute of a created button"
        change_textfield                                                        : "Change an attribute of a created textfield"
        change_textarea                                                         : "Change an attribute of a created textarea"
        change_checkbox                                                         : "Change an attribute of a created checkbox"
        change_dropdown                                                         : "Change an attribute of a created dropdown"
        change_slider                                                           : "Change an attribute of a created slider"
    }
}

define change_window{
    any_of {
        window_width                                                            : "Define the width of the window"
        window_height                                                           : "Define the height of the window"
        window_color                                                            : "Define the background color of the window"
    }
}

define change_button {
    any_of {
        button_disabled                                                         : "Specifies that a button should be disabled or not"
        button_text                                                             : "Change the text on the button"
        button_color                                                            : "Define the background color of the button"
        button_width                                                            : "Define the width of the button"
        button_height                                                           : "Define the height of the button"
        button_position                                                         : "Define the position of the button"
    }
}

define change_textfield {
    any_of {
        textfield_width                                                         : "Define the width of the textfield"
        textfield_position                                                      : "Define the position of the textfield"
        textfield_value                                                         : "Define the default value of the textfield"
        textfield_maxlength                                                     : "Define the max length of the value of the textfield"
    }
}

define change_textarea {
    any_of {
        textarea_height                                                         : "Define the height of the textarea"
        textarea_width                                                          : "Define the width of the textarea"
        textarea_position                                                       : "Define the position of the textarea"
        textarea_maxlength                                                      : "Define the max length of the text of the textarea"
    }
}

define change_checkbox {
    any_of {
        checkbox_position                                                       : "Define the position of the checkbox"
        checkbox_text                                                           : "Define the text of the checkbox"
        checkbox_checked                                                        : "Define if the checkbox will be checked or not"
    }
}

define change_dropdown {
    any_of {
        dropdown_position                                                       : "Define the position of the dropdown"
        dropdown_multiple                                                       : "Define that multiple options can be selected at once"
        dropdown_add_option                                                     : "Add one more option in the dropdown"
    }
}

define change_slider {
    any_of {
        slider_position                                                         : "Define the position of the slider"
        slider_label                                                            : "Define/Change the label of the slider"
        slider_min                                                              : "Define the min value of the slider"
        slider_max                                                              : "Define the max value of the slider"
    }

}

define window_width {
    change IDENT("window_name") new_width primary_expr("width")                 : "Define the width of the window"
}

define window_height {
    change IDENT("window_name") new_height primary_expr("height")               : "Define the height of the window"
}

define window_color {
    change IDENT("window_name") background primary_expr("color")                : "Define the background color of the window"
}

define button_disabled {
    change IDENT("button_name") disable BOOLEAN_CONST                           : "Specifies that a button should be disabled or not"
}

define button_text {
    change IDENT("button_name") text primary_expr("text")                       : "Change the text on the button"
}

define button_color {
    change IDENT("button_name") background primary_expr("color")                : "Define the background color of the button"
}

define button_width {
    change IDENT("button_name") new_width primary_expr("width")                 : "Define the width of the button"
}

define button_height {
    change IDENT("button_name") new_height primary_expr("height")               : "Define the height of the button"
}

define button_position {
    change IDENT("button_name") on primary_expr("x") primary_expr("y")          : "Define the position of the button"
}

define textfield_width {
    change IDENT("textfield_name") new_width primary_expr("width")              : "Define the width of the textfield"
}

define textfield_position {
    change IDENT("textfield_name") on primary_expr("x") primary_expr("y")       : "Define the position of the textfield"
}

define textfield_value {
    change IDENT("textfield_name") text primary_expr("text")                    : "Define the default value of the textfield"                       
}

define textfield_maxlength {
    change IDENT("textfield_name") max INT_CONST("maxlength")                   : "Define the max lenght of the value of the textfield"
}

define textarea_height {
    change IDENT("textarea_name") new_height primary_expr("height")             : "Define the height of the textarea"
}

define textarea_width {
    change IDENT("textarea_name") new_width primary_expr("width")               : "Define the width of the textarea"
}  

define textarea_position {
    change IDENT("textarea_name") on primary_expr("x") primary_expr("y")        : "Define the position of the textarea"
}  

define textarea_maxlength {
    change IDENT("textarea_name") max INT_CONST("maxlength")                    : "Define the max length of the text of the textarea"
}

define checkbox_position {
    change IDENT("checkbox_name") on primary_expr("x") primary_expr("y")        : "Define the position of the checkbox"
}

define checkbox_text {
    change IDENT("checkbox_name") text primary_expr("text")                     : "Define the text of the checkbox"
}

define checkbox_checked {
    change IDENT("checkbox_name") checked BOOLEAN_CONST                         : "Define if the checkbox will be checked or not"
}

define dropdown_position {
    change IDENT("dropdown_name") on primary_expr("x") primary_expr("y")        : "Define the position of the dropdown"
}

define dropdown_multiple {
    change IDENT("dropdown_name") multiple BOOLEAN_CONST                        : "Define that multiple options can be selected at once"
}

define dropdown_add_option {
    change IDENT("dropdown_name") new_option STRING_CONST("option")             : "Add one more option in the dropdown"
}

define slider_position {
    change IDENT("slider_name") on primary_expr("x") primary_expr("y")          : "Define the position of the slider"
}

define slider_label {
    change IDENT("slider_name") label primary_expr("label")                     : "Define/Change the label of the slider"
}

define slider_min {
    change IDENT("slider_name") min primary_expr("min")                         : "Define the min value of the slider"
}

define slider_max {
    change IDENT("slider_name") max primary_expr("max")                         : "Define the max value of the slider"
}

define add_event_handler {
    any_of {
        button_event                                                            : "Add an event handler when pressing a button"
        checkbox_event                                                          : "Add an event handler when selecting a checkbox"
        dropdown_event                                                          : "Add an event handler when selecting a specific dropdown option"
    }
}

define button_event {
    on_press IDENT("button_name") stmts                                         : "Add an event handler when pressing a button"
}

define checkbox_event {
    on_select IDENT("checkbox_name") stmts                                      : "Add an event handler when selecting a checkbox"
}

define dropdown_event {
    on_select IDENT("dropdown_name") IDENT("dropdown_option") stmts             : "Add an event handler when selecting a specific dropdown option"
}

define get_element_value {
    any_of {
        get_textarea_value                                                      : "Get the value of the textarea to use it"
        get_textfield_value                                                     : "Get the value of the textfield to use it"
        get_slider_value                                                        : "Get the value of the slider to use it"
    }
}

define get_textarea_value {
    get_value IDENT("textarea_name")                                            : "Get the value of the textarea to use it"
}

define get_textfield_value {
    get_value IDENT("textfield_name")                                           : "Get the value of the textfield to use it"
}

define get_slider_value {
    get_value IDENT("slider_name")                                              : "Get the value of the slider to use it"
}